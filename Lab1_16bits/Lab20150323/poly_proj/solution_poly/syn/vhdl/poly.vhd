-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2013.4
-- Copyright (C) 2013 Xilinx Inc. All rights reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity poly is
port (
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    x : IN STD_LOGIC_VECTOR (15 downto 0);
    y : OUT STD_LOGIC_VECTOR (15 downto 0);
    y_ap_vld : OUT STD_LOGIC );
end;


architecture behav of poly is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "poly,hls_ip_2013_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7v585tffg1761-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.670000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=0}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_true : BOOLEAN := true;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";

    signal tmp_3_fu_32_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_3_fu_32_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_38_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_1_fu_38_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_50_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_50_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp1_fu_50_p2 : STD_LOGIC_VECTOR (15 downto 0);


begin



    ap_done <= ap_start;
    ap_idle <= ap_const_logic_1;
    ap_ready <= ap_start;
    tmp1_fu_50_p0 <= std_logic_vector(unsigned(tmp_1_fu_38_p2) + unsigned(ap_const_lv16_2));
    tmp1_fu_50_p1 <= x;
    tmp1_fu_50_p2 <= std_logic_vector(resize(unsigned(std_logic_vector(signed(tmp1_fu_50_p0) * signed(tmp1_fu_50_p1))), 16));
    tmp_1_fu_38_p1 <= x;
    tmp_1_fu_38_p2 <= std_logic_vector(unsigned(tmp_3_fu_32_p2) - unsigned(tmp_1_fu_38_p1));
    tmp_3_fu_32_p0 <= x;
    tmp_3_fu_32_p2 <= std_logic_vector(shift_left(unsigned(tmp_3_fu_32_p0),to_integer(unsigned('0' & ap_const_lv16_2(16-1 downto 0)))));
    y <= std_logic_vector(unsigned(tmp1_fu_50_p2) + unsigned(ap_const_lv16_1));

    -- y_ap_vld assign process. --
    y_ap_vld_assign_proc : process(ap_start)
    begin
        if (not((ap_start = ap_const_logic_0))) then 
            y_ap_vld <= ap_const_logic_1;
        else 
            y_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
