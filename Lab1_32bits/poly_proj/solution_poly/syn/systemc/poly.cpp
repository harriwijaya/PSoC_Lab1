// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "poly.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic poly::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic poly::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<3> poly::ap_ST_st1_fsm_0 = "000";
const sc_lv<3> poly::ap_ST_st2_fsm_1 = "1";
const sc_lv<3> poly::ap_ST_st3_fsm_2 = "10";
const sc_lv<3> poly::ap_ST_st4_fsm_3 = "11";
const sc_lv<3> poly::ap_ST_st5_fsm_4 = "100";
const sc_lv<32> poly::ap_const_lv32_2 = "10";
const sc_lv<32> poly::ap_const_lv32_1 = "1";

poly::poly(sc_module_name name) : sc_module(name), mVcdFile(0) {
    poly_mul_32s_32s_32_3_U1 = new poly_mul_32s_32s_32_3<1,3,32,32,32>("poly_mul_32s_32s_32_3_U1");
    poly_mul_32s_32s_32_3_U1->clk(ap_clk);
    poly_mul_32s_32s_32_3_U1->reset(ap_rst);
    poly_mul_32s_32s_32_3_U1->din0(grp_fu_50_p0);
    poly_mul_32s_32s_32_3_U1->din1(grp_fu_50_p1);
    poly_mul_32s_32s_32_3_U1->ce(grp_fu_50_ce);
    poly_mul_32s_32s_32_3_U1->dout(grp_fu_50_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_grp_fu_50_ce);

    SC_METHOD(thread_grp_fu_50_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp_reg_65 );

    SC_METHOD(thread_grp_fu_50_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );

    SC_METHOD(thread_tmp_1_fu_38_p1);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );

    SC_METHOD(thread_tmp_1_fu_38_p2);
    sensitive << ( tmp_3_fu_32_p2 );
    sensitive << ( tmp_1_fu_38_p1 );

    SC_METHOD(thread_tmp_3_fu_32_p0);
    sensitive << ( ap_CS_fsm );
    sensitive << ( x );

    SC_METHOD(thread_tmp_3_fu_32_p2);
    sensitive << ( tmp_3_fu_32_p0 );

    SC_METHOD(thread_tmp_fu_44_p2);
    sensitive << ( tmp_1_fu_38_p2 );

    SC_METHOD(thread_y);
    sensitive << ( ap_CS_fsm );
    sensitive << ( tmp1_reg_70 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "poly_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, tmp_fu_44_p2, "tmp_fu_44_p2");
    sc_trace(mVcdFile, tmp_reg_65, "tmp_reg_65");
    sc_trace(mVcdFile, grp_fu_50_p2, "grp_fu_50_p2");
    sc_trace(mVcdFile, tmp1_reg_70, "tmp1_reg_70");
    sc_trace(mVcdFile, tmp_3_fu_32_p0, "tmp_3_fu_32_p0");
    sc_trace(mVcdFile, tmp_3_fu_32_p2, "tmp_3_fu_32_p2");
    sc_trace(mVcdFile, tmp_1_fu_38_p1, "tmp_1_fu_38_p1");
    sc_trace(mVcdFile, tmp_1_fu_38_p2, "tmp_1_fu_38_p2");
    sc_trace(mVcdFile, grp_fu_50_p0, "grp_fu_50_p0");
    sc_trace(mVcdFile, grp_fu_50_p1, "grp_fu_50_p1");
    sc_trace(mVcdFile, grp_fu_50_ce, "grp_fu_50_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("poly.hdltvin.dat");
    mHdltvoutHandle.open("poly.hdltvout.dat");
}

poly::~poly() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete poly_mul_32s_32s_32_3_U1;
}

void poly::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_st1_fsm_0;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,3,3>(ap_ST_st4_fsm_3, ap_CS_fsm.read())) {
        tmp1_reg_70 = grp_fu_50_p2.read();
    }
    if ((esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()) && !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0))) {
        tmp_reg_65 = tmp_fu_44_p2.read();
    }
}

void poly::thread_ap_done() {
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void poly::thread_ap_idle() {
    if ((!esl_seteq<1,1,1>(ap_const_logic_1, ap_start.read()) && 
         esl_seteq<1,3,3>(ap_ST_st1_fsm_0, ap_CS_fsm.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void poly::thread_ap_ready() {
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void poly::thread_grp_fu_50_ce() {
    grp_fu_50_ce = ap_const_logic_1;
}

void poly::thread_grp_fu_50_p0() {
    grp_fu_50_p0 = tmp_reg_65.read();
}

void poly::thread_grp_fu_50_p1() {
    grp_fu_50_p1 = x.read();
}

void poly::thread_tmp_1_fu_38_p1() {
    tmp_1_fu_38_p1 = x.read();
}

void poly::thread_tmp_1_fu_38_p2() {
    tmp_1_fu_38_p2 = (!tmp_3_fu_32_p2.read().is_01() || !tmp_1_fu_38_p1.read().is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_3_fu_32_p2.read()) - sc_biguint<32>(tmp_1_fu_38_p1.read()));
}

void poly::thread_tmp_3_fu_32_p0() {
    tmp_3_fu_32_p0 = x.read();
}

void poly::thread_tmp_3_fu_32_p2() {
    tmp_3_fu_32_p2 = (!ap_const_lv32_2.is_01())? sc_lv<32>(): tmp_3_fu_32_p0.read() << (unsigned short)ap_const_lv32_2.to_uint();
}

void poly::thread_tmp_fu_44_p2() {
    tmp_fu_44_p2 = (!tmp_1_fu_38_p2.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<32>(): (sc_bigint<32>(tmp_1_fu_38_p2.read()) + sc_biguint<32>(ap_const_lv32_2));
}

void poly::thread_y() {
    y = (!tmp1_reg_70.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<32>(): (sc_bigint<32>(tmp1_reg_70.read()) + sc_biguint<32>(ap_const_lv32_1));
}

void poly::thread_y_ap_vld() {
    if (esl_seteq<1,3,3>(ap_ST_st5_fsm_4, ap_CS_fsm.read())) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void poly::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint()) {
        case 0 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_st2_fsm_1;
            } else {
                ap_NS_fsm = ap_ST_st1_fsm_0;
            }
            break;
        case 1 : 
            ap_NS_fsm = ap_ST_st3_fsm_2;
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_st4_fsm_3;
            break;
        case 3 : 
            ap_NS_fsm = ap_ST_st5_fsm_4;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_st1_fsm_0;
            break;
        default : 
            ap_NS_fsm = "XXX";
            break;
    }
}
void poly::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

