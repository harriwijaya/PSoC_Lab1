// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2013.4
// Copyright (C) 2013 Xilinx Inc. All rights reserved.
// 
// ===========================================================

#include "poly.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic poly::ap_const_logic_1 = sc_dt::Log_1;
const bool poly::ap_true = true;
const sc_logic poly::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> poly::ap_const_lv16_2 = "10";
const sc_lv<16> poly::ap_const_lv16_1 = "1";

poly::poly(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_tmp1_fu_50_p0);
    sensitive << ( tmp_1_fu_38_p2 );

    SC_METHOD(thread_tmp1_fu_50_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp1_fu_50_p2);
    sensitive << ( tmp1_fu_50_p0 );
    sensitive << ( tmp1_fu_50_p1 );

    SC_METHOD(thread_tmp_1_fu_38_p1);
    sensitive << ( x );

    SC_METHOD(thread_tmp_1_fu_38_p2);
    sensitive << ( tmp_3_fu_32_p2 );
    sensitive << ( tmp_1_fu_38_p1 );

    SC_METHOD(thread_tmp_3_fu_32_p0);
    sensitive << ( x );

    SC_METHOD(thread_tmp_3_fu_32_p2);
    sensitive << ( tmp_3_fu_32_p0 );

    SC_METHOD(thread_y);
    sensitive << ( ap_start );
    sensitive << ( tmp1_fu_50_p2 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_start );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "poly_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, tmp_3_fu_32_p0, "tmp_3_fu_32_p0");
    sc_trace(mVcdFile, tmp_3_fu_32_p2, "tmp_3_fu_32_p2");
    sc_trace(mVcdFile, tmp_1_fu_38_p1, "tmp_1_fu_38_p1");
    sc_trace(mVcdFile, tmp_1_fu_38_p2, "tmp_1_fu_38_p2");
    sc_trace(mVcdFile, tmp1_fu_50_p0, "tmp1_fu_50_p0");
    sc_trace(mVcdFile, tmp1_fu_50_p1, "tmp1_fu_50_p1");
    sc_trace(mVcdFile, tmp1_fu_50_p2, "tmp1_fu_50_p2");
#endif

    }
    mHdltvinHandle.open("poly.hdltvin.dat");
    mHdltvoutHandle.open("poly.hdltvout.dat");
}

poly::~poly() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void poly::thread_ap_done() {
    ap_done = ap_start.read();
}

void poly::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void poly::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void poly::thread_tmp1_fu_50_p0() {
    tmp1_fu_50_p0 = (!tmp_1_fu_38_p2.read().is_01() || !ap_const_lv16_2.is_01())? sc_lv<16>(): (sc_bigint<16>(tmp_1_fu_38_p2.read()) + sc_biguint<16>(ap_const_lv16_2));
}

void poly::thread_tmp1_fu_50_p1() {
    tmp1_fu_50_p1 = x.read();
}

void poly::thread_tmp1_fu_50_p2() {
    tmp1_fu_50_p2 = (!tmp1_fu_50_p0.read().is_01() || !tmp1_fu_50_p1.read().is_01())? sc_lv<16>(): sc_bigint<16>(tmp1_fu_50_p0.read()) * sc_bigint<16>(tmp1_fu_50_p1.read());
}

void poly::thread_tmp_1_fu_38_p1() {
    tmp_1_fu_38_p1 = x.read();
}

void poly::thread_tmp_1_fu_38_p2() {
    tmp_1_fu_38_p2 = (!tmp_3_fu_32_p2.read().is_01() || !tmp_1_fu_38_p1.read().is_01())? sc_lv<16>(): (sc_bigint<16>(tmp_3_fu_32_p2.read()) - sc_biguint<16>(tmp_1_fu_38_p1.read()));
}

void poly::thread_tmp_3_fu_32_p0() {
    tmp_3_fu_32_p0 = x.read();
}

void poly::thread_tmp_3_fu_32_p2() {
    tmp_3_fu_32_p2 = (!ap_const_lv16_2.is_01())? sc_lv<16>(): tmp_3_fu_32_p0.read() << (unsigned short)ap_const_lv16_2.to_uint();
}

void poly::thread_y() {
    y = (!tmp1_fu_50_p2.read().is_01() || !ap_const_lv16_1.is_01())? sc_lv<16>(): (sc_bigint<16>(tmp1_fu_50_p2.read()) + sc_biguint<16>(ap_const_lv16_1));
}

void poly::thread_y_ap_vld() {
    if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void poly::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

